input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            Convert(source DBModel) ApiModel
        }

        type DBModel struct {
            Inner DBInner
        }
        type DBInner struct {
            Name string
            Value int
        }

        type ApiModel struct {
            Inner *ApiInner
        }
        type ApiInner struct {
            Name string
            Value int
        }
success: |
    // Code generated by github.com/rahimlis/go-converter, DO NOT EDIT.

    package generated

    import execution "github.com/rahimlis/go-converter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source execution.DBModel) execution.ApiModel {
    	var structsApiModel execution.ApiModel
    	structsApiModel.Inner = c.structsDBInnerToPStructsApiInner(source.Inner)
    	return structsApiModel
    }
    func (c *ConverterImpl) structsDBInnerToPStructsApiInner(source execution.DBInner) *execution.ApiInner {
    	structsApiInner := c.structsDBInnerToStructsApiInner(source)
    	return &structsApiInner
    }
    func (c *ConverterImpl) structsDBInnerToStructsApiInner(source execution.DBInner) execution.ApiInner {
    	var structsApiInner execution.ApiInner
    	structsApiInner.Name = source.Name
    	structsApiInner.Value = source.Value
    	return structsApiInner
    }
