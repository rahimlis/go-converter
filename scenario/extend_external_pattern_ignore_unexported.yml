input:
    convert/convert.go: |
        package convert

        func StringToBool(s string) bool {
            return stringToBool(s)
        }
        func stringToBool(s string) bool {
            return true
        }
    input.go: |
        package structs

        // goverter:converter
        // goverter:extend github.com/rahimlis/go-converter/execution/convert:.*
        type Converter interface {
            Convert(source Input) (Output, error)
        }

        type Input struct {
            Done string
        }
        type Output struct {
            Done bool
        }
success: |
    // Code generated by github.com/rahimlis/go-converter, DO NOT EDIT.

    package generated

    import (
    	execution "github.com/rahimlis/go-converter/execution"
    	convert "github.com/rahimlis/go-converter/execution/convert"
    )

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source execution.Input) (execution.Output, error) {
    	var structsOutput execution.Output
    	structsOutput.Done = convert.StringToBool(source.Done)
    	return structsOutput, nil
    }
