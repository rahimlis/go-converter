input:
    input.go: |
        package slices

        // goverter:converter
        type Converter interface {
            Convert(source map[string]map[uint]map[bool]string) map[string]map[uint]map[bool]string
        }
success: |
    // Code generated by github.com/rahimlis/go-converter, DO NOT EDIT.

    package generated

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source map[string]map[uint]map[bool]string) map[string]map[uint]map[bool]string {
    	mapStringMapUintMapBoolString := make(map[string]map[uint]map[bool]string, len(source))
    	for key, value := range source {
    		mapUintMapBoolString := make(map[uint]map[bool]string, len(value))
    		for key2, value2 := range value {
    			mapBoolString := make(map[bool]string, len(value2))
    			for key3, value3 := range value2 {
    				mapBoolString[key3] = value3
    			}
    			mapUintMapBoolString[key2] = mapBoolString
    		}
    		mapStringMapUintMapBoolString[key] = mapUintMapBoolString
    	}
    	return mapStringMapUintMapBoolString
    }
