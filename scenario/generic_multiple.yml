input:
    go.mod: |-
        module github.com/rahimlis/go-converter/execution
        go 1.18
    input.go: |
        package execution

        // goverter:converter
        type Converter interface {
            Convert(source InputWrapper[Input, *string, *struct{Name string}]) OutputWrapper[Output, *string, *struct{Name string}]
        }

        type InputWrapper[S, X, Y any] struct {
            Value S
        }
        type OutputWrapper[S, X, Y any] struct {
            Value S
        }

        type Input struct {
            Name string
            Age int
        }
        type Output struct {
            Name string
            Age int
        }
success: |
    // Code generated by github.com/rahimlis/go-converter, DO NOT EDIT.

    package generated

    import execution "github.com/rahimlis/go-converter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source execution.InputWrapper[execution.Input, *string, *struct {
    	Name string
    }]) execution.OutputWrapper[execution.Output, *string, *struct {
    	Name string
    }] {
    	var executionOutputWrapper execution.OutputWrapper[execution.Output, *string, *struct {
    		Name string
    	}]
    	executionOutputWrapper.Value = c.executionInputToExecutionOutput(source.Value)
    	return executionOutputWrapper
    }
    func (c *ConverterImpl) executionInputToExecutionOutput(source execution.Input) execution.Output {
    	var executionOutput execution.Output
    	executionOutput.Name = source.Name
    	executionOutput.Age = source.Age
    	return executionOutput
    }
