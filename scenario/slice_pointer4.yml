input:
    input.go: |
        package slices_arrays

        // goverter:converter
        type Converter interface {
           ConvertHouse(source []*Input) []*Output
        }

        type Input struct {
           Name string
        }

        type Output struct {
           Name string
        }
success: |
    // Code generated by github.com/rahimlis/go-converter, DO NOT EDIT.

    package generated

    import execution "github.com/rahimlis/go-converter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) ConvertHouse(source []*execution.Input) []*execution.Output {
    	var pSlices_arraysOutputList []*execution.Output
    	if source != nil {
    		pSlices_arraysOutputList = make([]*execution.Output, len(source))
    		for i := 0; i < len(source); i++ {
    			pSlices_arraysOutputList[i] = c.pSlices_arraysInputToPSlices_arraysOutput(source[i])
    		}
    	}
    	return pSlices_arraysOutputList
    }
    func (c *ConverterImpl) pSlices_arraysInputToPSlices_arraysOutput(source *execution.Input) *execution.Output {
    	var pSlices_arraysOutput *execution.Output
    	if source != nil {
    		var slices_arraysOutput execution.Output
    		slices_arraysOutput.Name = (*source).Name
    		pSlices_arraysOutput = &slices_arraysOutput
    	}
    	return pSlices_arraysOutput
    }
